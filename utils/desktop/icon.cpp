#include <errno.h>
#include <gui/bitmap.h>
#include <stdlib.h>
#include <stdio.h>


using namespace Os;

struct PalletteEntry_s
{
  uint8 nRed;
  uint8	nGreen;
  uint8	nBlue;
  uint8	nAlpha;
};


PalletteEntry_s asDefaultPallette[] = {
  {0x00, 0x00, 0x00, 0x00},
  {0x08, 0x08, 0x08, 0x00},
  {0x10, 0x10, 0x10, 0x00},
  {0x18, 0x18, 0x18, 0x00},
  {0x20, 0x20, 0x20, 0x00},
  {0x28, 0x28, 0x28, 0x00},
  {0x30, 0x30, 0x30, 0x00},
  {0x38, 0x38, 0x38, 0x00},
  {0x40, 0x40, 0x40, 0x00},
  {0x48, 0x48, 0x48, 0x00},
  {0x50, 0x50, 0x50, 0x00},
  {0x58, 0x58, 0x58, 0x00},
  {0x60, 0x60, 0x60, 0x00},
  {0x68, 0x68, 0x68, 0x00},
  {0x70, 0x70, 0x70, 0x00},
  {0x78, 0x78, 0x78, 0x00},
  {0x80, 0x80, 0x80, 0x00},
  {0x88, 0x88, 0x88, 0x00},
  {0x90, 0x90, 0x90, 0x00},
  {0x98, 0x98, 0x98, 0x00},
  {0xa0, 0xa0, 0xa0, 0x00},
  {0xa8, 0xa8, 0xa8, 0x00},
  {0xb0, 0xb0, 0xb0, 0x00},
  {0xb8, 0xb8, 0xb8, 0x00},
  {0xc0, 0xc0, 0xc0, 0x00},
  {0xc8, 0xc8, 0xc8, 0x00},
  {0xd0, 0xd0, 0xd0, 0x00},
  {0xd9, 0xd9, 0xd9, 0x00},
  {0xe2, 0xe2, 0xe2, 0x00},
  {0xeb, 0xeb, 0xeb, 0x00},
  {0xf5, 0xf5, 0xf5, 0x00},
  {0xfe, 0xfe, 0xfe, 0x00},
  {0xff, 0x00, 0x00, 0x00},
  {0xe5, 0x00, 0x00, 0x00},
  {0xcc, 0x00, 0x00, 0x00},
  {0xb3, 0x00, 0x00, 0x00},
  {0x9a, 0x00, 0x00, 0x00},
  {0x81, 0x00, 0x00, 0x00},
  {0x69, 0x00, 0x00, 0x00},
  {0x50, 0x00, 0x00, 0x00},
  {0x37, 0x00, 0x00, 0x00},
  {0x1e, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0xe4, 0x00},
  {0x00, 0x00, 0xcb, 0x00},
  {0x00, 0x00, 0xb2, 0x00},
  {0x00, 0x00, 0x99, 0x00},
  {0x00, 0x00, 0x80, 0x00},
  {0x00, 0x00, 0x69, 0x00},
  {0x00, 0x00, 0x50, 0x00},
  {0x00, 0x00, 0x37, 0x00},
  {0x00, 0x00, 0x1e, 0x00},
  {0x00, 0xff, 0x00, 0x00},
  {0x00, 0xe4, 0x00, 0x00},
  {0x00, 0xcb, 0x00, 0x00},
  {0x00, 0xb2, 0x00, 0x00},
  {0x00, 0x99, 0x00, 0x00},
  {0x00, 0x80, 0x00, 0x00},
  {0x00, 0x69, 0x00, 0x00},
  {0x00, 0x50, 0x00, 0x00},
  {0x00, 0x37, 0x00, 0x00},
  {0x00, 0x1e, 0x00, 0x00},
  {0x33, 0x98, 0x00, 0x00},
  {0xff, 0xff, 0xff, 0x00},
  {0xff, 0xff, 0xcb, 0x00},
  {0xcb, 0xff, 0xcb, 0x00},
  {0x98, 0xff, 0xcb, 0x00},
  {0x66, 0xff, 0xcb, 0x00},
  {0x33, 0xff, 0xcb, 0x00},
  {0x00, 0xff, 0xcb, 0x00},
  {0xff, 0xff, 0x98, 0x00},
  {0xcb, 0xff, 0x98, 0x00},
  {0x98, 0xff, 0x98, 0x00},
  {0x66, 0xff, 0x98, 0x00},
  {0x33, 0xff, 0x98, 0x00},
  {0x00, 0xff, 0x98, 0x00},
  {0xff, 0xff, 0x66, 0x00},
  {0xcb, 0xff, 0x66, 0x00},
  {0x98, 0xff, 0x66, 0x00},
  {0x66, 0xff, 0x66, 0x00},
  {0x33, 0xff, 0x66, 0x00},
  {0x00, 0xff, 0x66, 0x00},
  {0xff, 0xff, 0x33, 0x00},
  {0xcb, 0xff, 0x33, 0x00},
  {0x98, 0xff, 0x33, 0x00},
  {0x66, 0xff, 0x33, 0x00},
  {0x33, 0xff, 0x33, 0x00},
  {0x00, 0xff, 0x33, 0x00},
  {0xff, 0x98, 0xff, 0x00},
  {0xcb, 0x98, 0xff, 0x00},
  {0x98, 0x98, 0xff, 0x00},
  {0x66, 0x98, 0xff, 0x00},
  {0x33, 0x98, 0xff, 0x00},
  {0x00, 0x98, 0xff, 0x00},
  {0xff, 0x66, 0x00, 0x00},
  {0xcb, 0x66, 0x00, 0x00},
  {0xff, 0xcb, 0xcb, 0x00},
  {0xcb, 0xcb, 0xcb, 0x00},
  {0x98, 0xcb, 0xcb, 0x00},
  {0x66, 0xcb, 0xcb, 0x00},
  {0x33, 0xcb, 0xcb, 0x00},
  {0x00, 0xcb, 0xcb, 0x00},
  {0xff, 0xcb, 0x98, 0x00},
  {0xcb, 0xcb, 0x98, 0x00},
  {0x98, 0xcb, 0x98, 0x00},
  {0x66, 0xcb, 0x98, 0x00},
  {0x33, 0xcb, 0x98, 0x00},
  {0x00, 0xcb, 0x98, 0x00},
  {0xff, 0xcb, 0x66, 0x00},
  {0xcb, 0xcb, 0x66, 0x00},
  {0x98, 0xcb, 0x66, 0x00},
  {0x66, 0xcb, 0x66, 0x00},
  {0x33, 0xcb, 0x66, 0x00},
  {0x00, 0xcb, 0x66, 0x00},
  {0xff, 0xcb, 0x33, 0x00},
  {0xcb, 0xcb, 0x33, 0x00},
  {0x98, 0xcb, 0x33, 0x00},
  {0x66, 0xcb, 0x33, 0x00},
  {0x33, 0xcb, 0x33, 0x00},
  {0x00, 0xcb, 0x33, 0x00},
  {0xff, 0x66, 0xff, 0x00},
  {0xcb, 0x66, 0xff, 0x00},
  {0x98, 0x66, 0xff, 0x00},
  {0x66, 0x66, 0xff, 0x00},
  {0x33, 0x66, 0xff, 0x00},
  {0x00, 0x66, 0xff, 0x00},
  {0x98, 0x66, 0x00, 0x00},
  {0x66, 0x66, 0x00, 0x00},
  {0xff, 0x98, 0xcb, 0x00},
  {0xcb, 0x98, 0xcb, 0x00},
  {0x98, 0x98, 0xcb, 0x00},
  {0x66, 0x98, 0xcb, 0x00},
  {0x33, 0x98, 0xcb, 0x00},
  {0x00, 0x98, 0xcb, 0x00},
  {0xff, 0x98, 0x98, 0x00},
  {0xcb, 0x98, 0x98, 0x00},
  {0x98, 0x98, 0x98, 0x00},
  {0x66, 0x98, 0x98, 0x00},
  {0x33, 0x98, 0x98, 0x00},
  {0x00, 0x98, 0x98, 0x00},
  {0xff, 0x98, 0x66, 0x00},
  {0xcb, 0x98, 0x66, 0x00},
  {0x98, 0x98, 0x66, 0x00},
  {0x66, 0x98, 0x66, 0x00},
  {0x33, 0x98, 0x66, 0x00},
  {0x00, 0x98, 0x66, 0x00},
  {0xff, 0x98, 0x33, 0x00},
  {0xcb, 0x98, 0x33, 0x00},
  {0x98, 0x98, 0x33, 0x00},
  {0x66, 0x98, 0x33, 0x00},
  {0x33, 0x98, 0x33, 0x00},
  {0x00, 0x98, 0x33, 0x00},
  {0x00, 0x86, 0xe6, 0x00},
  {0xcb, 0x33, 0xff, 0x00},
  {0x98, 0x33, 0xff, 0x00},
  {0x66, 0x33, 0xff, 0x00},
  {0x33, 0x33, 0xff, 0x00},
  {0x00, 0x33, 0xff, 0x00},
  {0x33, 0x66, 0x00, 0x00},
  {0x00, 0x66, 0x00, 0x00},
  {0xff, 0x66, 0xcb, 0x00},
  {0xcb, 0x66, 0xcb, 0x00},
  {0x98, 0x66, 0xcb, 0x00},
  {0x66, 0x66, 0xcb, 0x00},
  {0x33, 0x66, 0xcb, 0x00},
  {0x00, 0x66, 0xcb, 0x00},
  {0xff, 0x66, 0x98, 0x00},
  {0xcb, 0x66, 0x98, 0x00},
  {0x98, 0x66, 0x98, 0x00},
  {0x66, 0x66, 0x98, 0x00},
  {0x33, 0x66, 0x98, 0x00},
  {0x00, 0x66, 0x98, 0x00},
  {0xff, 0x66, 0x66, 0x00},
  {0xcb, 0x66, 0x66, 0x00},
  {0x98, 0x66, 0x66, 0x00},
  {0x66, 0x66, 0x66, 0x00},
  {0x33, 0x66, 0x66, 0x00},
  {0x00, 0x66, 0x66, 0x00},
  {0xff, 0x66, 0x33, 0x00},
  {0xcb, 0x66, 0x33, 0x00},
  {0x98, 0x66, 0x33, 0x00},
  {0x66, 0x66, 0x33, 0x00},
  {0x33, 0x66, 0x33, 0x00},
  {0x00, 0x66, 0x33, 0x00},
  {0xff, 0x00, 0xff, 0x00},
  {0xcb, 0x00, 0xff, 0x00},
  {0x98, 0x00, 0xff, 0x00},
  {0x66, 0x00, 0xff, 0x00},
  {0x33, 0x00, 0xff, 0x00},
  {0x13, 0xaf, 0xff, 0x00},
  {0xff, 0x33, 0x00, 0x00},
  {0xcb, 0x33, 0x00, 0x00},
  {0xff, 0x33, 0xcb, 0x00},
  {0xcb, 0x33, 0xcb, 0x00},
  {0x98, 0x33, 0xcb, 0x00},
  {0x66, 0x33, 0xcb, 0x00},
  {0x33, 0x33, 0xcb, 0x00},
  {0x00, 0x33, 0xcb, 0x00},
  {0xff, 0x33, 0x98, 0x00},
  {0xcb, 0x33, 0x98, 0x00},
  {0x98, 0x33, 0x98, 0x00},
  {0x66, 0x33, 0x98, 0x00},
  {0x33, 0x33, 0x98, 0x00},
  {0x00, 0x33, 0x98, 0x00},
  {0xff, 0x33, 0x66, 0x00},
  {0xcb, 0x33, 0x66, 0x00},
  {0x98, 0x33, 0x66, 0x00},
  {0x66, 0x33, 0x66, 0x00},
  {0x33, 0x33, 0x66, 0x00},
  {0x00, 0x33, 0x66, 0x00},
  {0xff, 0x33, 0x33, 0x00},
  {0xcb, 0x33, 0x33, 0x00},
  {0x98, 0x33, 0x33, 0x00},
  {0x66, 0x33, 0x33, 0x00},
  {0x33, 0x33, 0x33, 0x00},
  {0x00, 0x33, 0x33, 0x00},
  {0x66, 0xcb, 0xff, 0x00},
  {0x98, 0xcb, 0xff, 0x00},
  {0xcb, 0xcb, 0xff, 0x00},
  {0xff, 0xcb, 0xff, 0x00},
  {0x98, 0x33, 0x00, 0x00},
  {0x66, 0x33, 0x00, 0x00},
  {0x33, 0x33, 0x00, 0x00},
  {0x00, 0x33, 0x00, 0x00},
  {0xff, 0x00, 0xcb, 0x00},
  {0xcb, 0x00, 0xcb, 0x00},
  {0x98, 0x00, 0xcb, 0x00},
  {0x66, 0x00, 0xcb, 0x00},
  {0x33, 0x00, 0xcb, 0x00},
  {0x46, 0xe3, 0xff, 0x00},
  {0xff, 0x00, 0x98, 0x00},
  {0xcb, 0x00, 0x98, 0x00},
  {0x98, 0x00, 0x98, 0x00},
  {0x66, 0x00, 0x98, 0x00},
  {0x33, 0x00, 0x98, 0x00},
  {0x00, 0x00, 0x98, 0x00},
  {0xff, 0x00, 0x66, 0x00},
  {0xcb, 0x00, 0x66, 0x00},
  {0x98, 0x00, 0x66, 0x00},
  {0x66, 0x00, 0x66, 0x00},
  {0x33, 0x00, 0x66, 0x00},
  {0x00, 0x00, 0x66, 0x00},
  {0xff, 0x00, 0x33, 0x00},
  {0xcb, 0x00, 0x33, 0x00},
  {0x98, 0x00, 0x33, 0x00},
  {0x66, 0x00, 0x33, 0x00},
  {0x33, 0x00, 0x33, 0x00},
  {0x00, 0x00, 0x33, 0x00},
  {0x33, 0xcb, 0xff, 0x00},
  {0x00, 0xcb, 0xff, 0x00},
  {0x00, 0xff, 0xff, 0x00},
  {0x33, 0xff, 0xff, 0x00},
  {0x66, 0xff, 0xff, 0x00},
  {0x98, 0xff, 0xff, 0x00},
  {0xcb, 0xff, 0xff, 0x00},
  {0xff, 0xff, 0xff, 0xff}
};


Bitmap* LoadIcon( const char* pzPath )
{
  FILE* hFile = fopen( pzPath, "r" );

  if ( hFile == NULL ) {
    printf( "Failed to open %s\n", pzPath );
    return( NULL );
  }
  int nSize = 32 * 32;
  uint8* pBuffer = new uint8[nSize];
  uint8* pSrc = pBuffer;
  fread( pBuffer, 1, nSize, hFile );

  Bitmap* pcBitmap = new Bitmap( 32, 32, CS_RGB32 );
  uint8* pRaster = pcBitmap->LockRaster();
  
  for ( uint y = 0 ; y < 32 ; ++y )
  {
    for ( uint x = 0 ; x < 32 ; ++x )
    {
      int nPix = *pSrc++;
	  
      *pRaster++ = asDefaultPallette[ nPix ].nRed;
      *pRaster++ = asDefaultPallette[ nPix ].nGreen;
      *pRaster++ = asDefaultPallette[ nPix ].nBlue;
      *pRaster++ = asDefaultPallette[ nPix ].nAlpha;
    }
  }
  delete[] pBuffer;

  return( pcBitmap );
}

void ConvertIcon( Bitmap* pcDst, const uint8* pSrc, bool bLarge )
{
//  int nSize = 32 * 32;

  uint8* pRaster = pcDst->LockRaster();

  uint nSize;

  if ( bLarge ) {
    nSize = 32;
  } else {
    nSize = 16;
  }
  int nModulo = (pcDst->GetBounds().Width() - nSize) * 4;
  
  for ( uint y = 0 ; y < nSize ; ++y )
  {
    for ( uint x = 0 ; x < nSize ; ++x )
    {
      int nPix = *pSrc++;
	  
      *pRaster++ = asDefaultPallette[ nPix ].nRed;
      *pRaster++ = asDefaultPallette[ nPix ].nGreen;
      *pRaster++ = asDefaultPallette[ nPix ].nBlue;
      *pRaster++ = asDefaultPallette[ nPix ].nAlpha;
    }
    pRaster += nModulo;
  }
}
